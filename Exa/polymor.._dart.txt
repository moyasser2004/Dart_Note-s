// Superclass:-

class Shape {
  double area() {
    return 0.0;
  }
}

// Subclass: Circle
class Circle extends Shape {
  double radius;
  Circle(this.radius);

  @override
  double area() {
    return 3.14 * radius * radius;
  }
}

// Subclass: Square
class Square extends Shape {
  double side;
  Square(this.side);

  @override
  double area() {
    return side * side;
  }
}

void main() {
  Shape shape;

  shape = Circle(5);
  print('Area of Circle: ${shape.area()}');  // Output: Area of Circle: 78.5

  shape = Square(4);
  print('Area of Square: ${shape.area()}');  // Output: Area of Square: 16
}



-------------------------------------------------------------------------------

// Interface:-

abstract class Animal {
  void makeSound();
}
orr
abstract interface class Animal {
  void makeSound();
}


class Dog implements Animal {
  @override
  void makeSound() {
    print('Bark');
  }
}

class Cat implements Animal {
  @override
  void makeSound() {
    print('Meow');
  }
}

void main() {
  Animal animal;

  animal = Dog();
  animal.makeSound();  // Output: Bark

  animal = Cat();
  animal.makeSound();  // Output: Meow
}


-------------------------------------------------------------------------------


void main() {
  List<Animal> animals = [Dog(), Cat()];

  for (var animal in animals) {
    animal.makeSound();
  }
  // Output:
  // Bark
  // Meow
}
